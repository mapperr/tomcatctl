# tomcatctl configuration

DATA=`date +'%Y%m%d'`
ORA=`date +'%H%M%S'`
TIMESTAMP="$DATA-$ORA"

# utente con cui vengono avviati/terminati i tomcat
CATALINA_USER=""
CATALINA_GROUP="tomcatctl"

# assicurarsi che esista almeno sto template
DEFAULT_TEMPLATE="base"

# the url to the template repository
URL_TEMPLATE_REPO="http://tomcatctl.mapperr.net/tomcatctl"

# artifact repo
URL_ARTIFACT_REPO="http://tomcatctl.mapperr.net/artifacts"

DIR_BIN="$DIR_BASE/bin"
DIR_LOG="$DIR_BASE/log"
DIR_CONF="$DIR_BASE/conf"
DIR_CONF_TEMPLATE_SKELETONS="$DIR_BASE/conf/template-skeletons"

# directory dove vengono copiati gli war da deployare
DIR_APPS="$DIR_BASE/apps"

# la directory che viene eventualmente utilizzata come JAVA_HOME
DIR_JDK="$DIR_BASE/jdk"

# questa directory contiene i templates dei vari tomcat
# se per qualche motivo un'istanza non ha un template riconoscibile
# allora verra` utilizzato il template di default
DIR_TEMPLATES="$DIR_BASE/templates"

# questa directory puo` essere settata dove ti pare
# conterra` le istanze di tomcat controllate da questo script
# settare il flag sgid: chmod g+s $DIR_ISTANZE
DIR_ISTANZE="$DIR_BASE/istanze"

#files
FILE_LOG="$DIR_LOG/$DATA.log"
FILE_PID="$DIR_BASE/tomcatctl.pid"

# manager
TOMCAT_MANAGER_CONTEXT="tomcatctlmanager"
TOMCAT_MANAGER_USERNAME="tomcatctl"
TOMCAT_MANAGER_PASSWORD="tomcatctl"
TOMCAT_MANAGER_USERS_LINE="<user username=\"$TOMCAT_MANAGER_USERNAME\" password=\"$TOMCAT_MANAGER_PASSWORD\" roles=\"manager-script\"/>"
DIR_TOMCAT_MANAGER_RUNTIME="$DIR_CONF_TEMPLATE_SKELETONS/webapps/$TOMCAT_MANAGER_CONTEXT"
TOMCAT_MANAGER_CONTEXT_PLACEHOLDER="tomcatctl_manager_docbase_placeholder"

# filenames
FILENAME_TEMPLATE="TEMPLATE"
FILENAME_TAG="TAG"


# --------------------------------------------
# controlli
# --------------------------------------------

# controllo che ci sia un client http valido e lo setto
# il client http serve principalmente a comunicare col tomcat manager
if hash wget
then
	HTTP_BIN="wget -qO- -t1 -T120 --no-proxy"
	HTTP_BIN_DOWNLOAD="wget -q -nc -t1 -T120 --no-proxy"
	BIN_DOWNLOAD="$HTTP_BIN_DOWNLOAD"
else
	echo "impossibile trovare un client http valido!"
	echo "installare un client http valido"
	echo "clients validi: wget"
	exit 1
fi

if hash unzip; then
  BIN_UNZIP="unzip"
else
  echo "[unzip] command not present, please install it"
  exit 1
fi

# rilevo ambienti che hanno bisogno di trattamenti particolari
if uname | grep -i "cygwin" > /dev/null
then
	OS="cygwin"
else
	OS="altro"
fi

# setto la JAVA_HOME
if [ -d "$DIR_JDK" ]
then
	export JAVA_HOME="$DIR_JDK"
fi

# --------------------------------------------
# funzioni globali
# --------------------------------------------
get_timestamp()
{
	DATA=`date +'%Y%m%d'`
	ORA=`date +'%H%M%S'`
	TIMESTAMP="$DATA$ORA"
	
	if [ "$1" = "data" ]; then
		echo "$DATA"
		return 0
	elif [ "$1" = "ora" ]; then
		echo "$ORA"
		return 0
	fi
	
	echo "$TIMESTAMP"
	return 0
}

echolog()
{
	logmesg="`date +'%Y%m%d.%H%M%S'` - `whoami` >>> $1"
	echo "$logmesg"
	echo "$logmesg" >> "$FILE_LOG"
}


# --------------------------------------------
# pre-esecuzione
# --------------------------------------------

# tutti i permessi settati per il gruppo
umask 0002
